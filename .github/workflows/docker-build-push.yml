name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: hubui

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment files
      if: github.event_name != 'pull_request'
      run: |
        mkdir -p deployment
        
        # Create docker-compose.yml for easy deployment
        cat > deployment/docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          hubui:
            image: ${{ secrets.DOCKER_USERNAME }}/hubui:latest
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=production
              - PORT=3000
              - HOSTNAME=0.0.0.0
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
            networks:
              - hubui-network
        
        networks:
          hubui-network:
            driver: bridge
        EOF
        
        # Create deployment README
        cat > deployment/README.md << 'EOF'
        # HubUI Deployment
        
        ## Quick Start with Docker Compose
        
        1. Download the docker-compose.yml file
        2. Run the application:
        
        ```bash
        docker-compose up -d
        ```
        
        The application will be available at http://localhost:3000
        
        ## Quick Start with Docker Run
        
        ```bash
        docker run -d \
          --name hubui \
          -p 3000:3000 \
          -e NODE_ENV=production \
          --restart unless-stopped \
          ${{ secrets.DOCKER_USERNAME }}/hubui:latest
        ```
        
        ## Environment Variables
        
        - `NODE_ENV`: Set to 'production' for production deployment
        - `PORT`: Port to run the application on (default: 3000)
        - `HOSTNAME`: Hostname to bind to (default: 0.0.0.0)
        
        ## Health Check
        
        The container includes a health check that monitors the application status.
        You can check the health status with:
        
        ```bash
        docker ps
        ```
        
        ## Stopping the Application
        
        ### Docker Compose
        ```bash
        docker-compose down
        ```
        
        ### Docker Run
        ```bash
        docker stop hubui
        docker rm hubui
        ```
        EOF

    - name: Upload deployment artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deployment/
        retention-days: 30

    - name: Update Docker Hub description
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ secrets.DOCKER_USERNAME }}/hubui
        short-description: "HubUI - Modern web application built with Next.js, React, and TypeScript"
        readme-filepath: ./README.md
